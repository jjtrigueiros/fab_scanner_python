"""
SQLAlchemy model for a database generated by 'the-fab-cube/flesh-and-blood-cards'.
Autogenerated from schema using sqlacodegen_v2.
"""

from sqlalchemy import ARRAY, Boolean, Column, DateTime, ForeignKeyConstraint, PrimaryKeyConstraint, SmallInteger, String, Table, UniqueConstraint, text
from sqlalchemy.orm import Mapped, DeclarativeBase, mapped_column, relationship


class Base(DeclarativeBase):
    pass

metadata = Base.metadata

class Abilities(Base):
    __tablename__ = 'abilities'
    __table_args__ = (
        PrimaryKeyConstraint('unique_id', name='abilities_pkey'),
    )

    unique_id = mapped_column(String(21))
    name = mapped_column(String(255), nullable=False)

    ability_translations: Mapped[list['AbilityTranslations']] = relationship('AbilityTranslations', uselist=True, back_populates='ability_unique')


t_artists = Table(
    'artists', metadata,
    Column('name', String(1000), nullable=False),
    UniqueConstraint('name', name='artists_name_key')
)


class Cards(Base):
    __tablename__ = 'cards'
    __table_args__ = (
        PrimaryKeyConstraint('unique_id', name='cards_pkey'),
        UniqueConstraint('name', 'pitch', name='cards_name_pitch_key')
    )

    unique_id = mapped_column(String(21))
    name = mapped_column(String(255), nullable=False)
    pitch = mapped_column(String(10), nullable=False)
    cost = mapped_column(String(10), nullable=False)
    power = mapped_column(String(10), nullable=False)
    defense = mapped_column(String(10), nullable=False)
    health = mapped_column(String(10), nullable=False)
    intelligence = mapped_column(String(10), nullable=False)
    arcane = mapped_column(String(10), nullable=False)
    types = mapped_column(ARRAY(String(length=255)), nullable=False)
    card_keywords = mapped_column(ARRAY(String(length=255)), nullable=False)
    abilities_and_effects = mapped_column(ARRAY(String(length=255)), nullable=False)
    ability_and_effect_keywords = mapped_column(ARRAY(String(length=255)), nullable=False)
    granted_keywords = mapped_column(ARRAY(String(length=255)), nullable=False)
    removed_keywords = mapped_column(ARRAY(String(length=255)), nullable=False)
    interacts_with_keywords = mapped_column(ARRAY(String(length=255)), nullable=False)
    functional_text = mapped_column(String(10000), nullable=False)
    functional_text_plain = mapped_column(String(10000), nullable=False)
    type_text = mapped_column(String(1000), nullable=False)
    played_horizontally = mapped_column(Boolean, nullable=False, server_default=text('false'))
    blitz_legal = mapped_column(Boolean, nullable=False, server_default=text('true'))
    cc_legal = mapped_column(Boolean, nullable=False, server_default=text('true'))
    commoner_legal = mapped_column(Boolean, nullable=False, server_default=text('true'))
    ll_legal = mapped_column(Boolean, nullable=False, server_default=text('true'))
    blitz_living_legend = mapped_column(Boolean, nullable=False, server_default=text('false'))
    cc_living_legend = mapped_column(Boolean, nullable=False, server_default=text('false'))
    blitz_banned = mapped_column(Boolean, nullable=False, server_default=text('false'))
    cc_banned = mapped_column(Boolean, nullable=False, server_default=text('false'))
    ll_banned = mapped_column(Boolean, nullable=False, server_default=text('false'))
    upf_banned = mapped_column(Boolean, nullable=False, server_default=text('false'))
    commoner_banned = mapped_column(Boolean, nullable=False, server_default=text('false'))
    blitz_suspended = mapped_column(Boolean, nullable=False, server_default=text('false'))
    cc_suspended = mapped_column(Boolean, nullable=False, server_default=text('false'))
    commoner_suspended = mapped_column(Boolean, nullable=False, server_default=text('false'))
    ll_restricted = mapped_column(Boolean, nullable=False, server_default=text('false'))
    blitz_living_legend_start = mapped_column(DateTime)
    cc_living_legend_start = mapped_column(DateTime)
    blitz_banned_start = mapped_column(DateTime)
    cc_banned_start = mapped_column(DateTime)
    ll_banned_start = mapped_column(DateTime)
    upf_banned_start = mapped_column(DateTime)
    commoner_banned_start = mapped_column(DateTime)
    blitz_suspended_start = mapped_column(DateTime)
    blitz_suspended_end = mapped_column(String(1000))
    cc_suspended_start = mapped_column(DateTime)
    cc_suspended_end = mapped_column(String(1000))
    commoner_suspended_start = mapped_column(DateTime)
    commoner_suspended_end = mapped_column(String(1000))
    ll_restricted_affects_full_cycle = mapped_column(Boolean)
    ll_restricted_start = mapped_column(DateTime)

    referenced_card_unique: Mapped['Cards'] = relationship('Cards', secondary='card_references', primaryjoin=lambda: Cards.unique_id == t_card_references.c.card_unique_id, secondaryjoin=lambda: Cards.unique_id == t_card_references.c.referenced_card_unique_id, back_populates='card_unique')
    card_unique: Mapped['Cards'] = relationship('Cards', secondary='card_references', primaryjoin=lambda: Cards.unique_id == t_card_references.c.referenced_card_unique_id, secondaryjoin=lambda: Cards.unique_id == t_card_references.c.card_unique_id, back_populates='referenced_card_unique')
    card_translations: Mapped[list['CardTranslations']] = relationship('CardTranslations', uselist=True, back_populates='card_unique')
    card_printings: Mapped[list['CardPrintings']] = relationship('CardPrintings', uselist=True, back_populates='card_unique')


class Editions(Base):
    __tablename__ = 'editions'
    __table_args__ = (
        PrimaryKeyConstraint('id', name='editions_pkey'),
    )

    id = mapped_column(String(255))
    name = mapped_column(String(255), nullable=False)


class Foilings(Base):
    __tablename__ = 'foilings'
    __table_args__ = (
        PrimaryKeyConstraint('id', name='foilings_pkey'),
    )

    id = mapped_column(String(255))
    name = mapped_column(String(255), nullable=False)


class Icons(Base):
    __tablename__ = 'icons'
    __table_args__ = (
        PrimaryKeyConstraint('icon', name='icons_pkey'),
    )

    icon = mapped_column(String(255))
    description = mapped_column(String(255), nullable=False)


class Keywords(Base):
    __tablename__ = 'keywords'
    __table_args__ = (
        PrimaryKeyConstraint('unique_id', name='keywords_pkey'),
        UniqueConstraint('name', name='keywords_name_key')
    )

    unique_id = mapped_column(String(21))
    description = mapped_column(String(1000), nullable=False)
    name = mapped_column(String(255))

    keyword_translations: Mapped[list['KeywordTranslations']] = relationship('KeywordTranslations', uselist=True, back_populates='keyword_unique')


class Rarities(Base):
    __tablename__ = 'rarities'
    __table_args__ = (
        PrimaryKeyConstraint('id', name='rarities_pkey'),
    )

    id = mapped_column(String(255))
    description = mapped_column(String(255), nullable=False)


class Sets(Base):
    __tablename__ = 'sets'
    __table_args__ = (
        PrimaryKeyConstraint('unique_id', name='sets_pkey'),
        UniqueConstraint('unique_id', 'id', name='sets_unique_id_id_key')
    )

    unique_id = mapped_column(String(21))
    id = mapped_column(String(255), nullable=False)
    name = mapped_column(String(255), nullable=False)

    set_printings: Mapped[list['SetPrintings']] = relationship('SetPrintings', uselist=True, back_populates='set_unique')


class Types(Base):
    __tablename__ = 'types'
    __table_args__ = (
        PrimaryKeyConstraint('unique_id', name='types_pkey'),
    )

    unique_id = mapped_column(String(21))
    name = mapped_column(String(255), nullable=False)

    type_translations: Mapped[list['TypeTranslations']] = relationship('TypeTranslations', uselist=True, back_populates='type_unique')


class AbilityTranslations(Base):
    __tablename__ = 'ability_translations'
    __table_args__ = (
        ForeignKeyConstraint(['ability_unique_id'], ['abilities.unique_id'], name='ability_translations_ability_unique_id_fkey'),
        PrimaryKeyConstraint('ability_unique_id', 'language', name='ability_translations_pkey')
    )

    ability_unique_id = mapped_column(String(21), nullable=False)
    language = mapped_column(String(10), nullable=False)
    name = mapped_column(String(255))

    ability_unique: Mapped['Abilities'] = relationship('Abilities', back_populates='ability_translations')


t_card_references = Table(
    'card_references', metadata,
    Column('card_unique_id', String(21), nullable=False),
    Column('referenced_card_unique_id', String(21), nullable=False),
    ForeignKeyConstraint(['card_unique_id'], ['cards.unique_id'], name='card_references_card_unique_id_fkey'),
    ForeignKeyConstraint(['referenced_card_unique_id'], ['cards.unique_id'], name='card_references_referenced_card_unique_id_fkey'),
    UniqueConstraint('card_unique_id', 'referenced_card_unique_id', name='card_references_card_unique_id_referenced_card_unique_id_key')
)


class CardTranslations(Base):
    __tablename__ = 'card_translations'
    __table_args__ = (
        ForeignKeyConstraint(['card_unique_id'], ['cards.unique_id'], name='card_translations_card_unique_id_fkey'),
        PrimaryKeyConstraint('card_unique_id', 'language', name='card_translations_pkey')
    )

    card_unique_id = mapped_column(String(21), nullable=False)
    language = mapped_column(String(10), nullable=False)
    name = mapped_column(String(255), nullable=False)
    pitch = mapped_column(String(10), nullable=False)
    types = mapped_column(ARRAY(String(length=255)), nullable=False)
    card_keywords = mapped_column(ARRAY(String(length=255)), nullable=False)
    abilities_and_effects = mapped_column(ARRAY(String(length=255)), nullable=False)
    ability_and_effect_keywords = mapped_column(ARRAY(String(length=255)), nullable=False)
    granted_keywords = mapped_column(ARRAY(String(length=255)), nullable=False)
    removed_keywords = mapped_column(ARRAY(String(length=255)), nullable=False)
    interacts_with_keywords = mapped_column(ARRAY(String(length=255)), nullable=False)
    functional_text = mapped_column(String(10000), nullable=False)
    functional_text_plain = mapped_column(String(10000), nullable=False)
    type_text = mapped_column(String(1000), nullable=False)

    card_unique: Mapped['Cards'] = relationship('Cards', back_populates='card_translations')


class KeywordTranslations(Base):
    __tablename__ = 'keyword_translations'
    __table_args__ = (
        ForeignKeyConstraint(['keyword_unique_id'], ['keywords.unique_id'], name='keyword_translations_keyword_unique_id_fkey'),
        PrimaryKeyConstraint('keyword_unique_id', 'language', name='keyword_translations_pkey')
    )

    keyword_unique_id = mapped_column(String(21), nullable=False)
    language = mapped_column(String(10), nullable=False)
    description = mapped_column(String(1000), nullable=False)
    name = mapped_column(String(255))

    keyword_unique: Mapped['Keywords'] = relationship('Keywords', back_populates='keyword_translations')


class SetPrintings(Base):
    __tablename__ = 'set_printings'
    __table_args__ = (
        ForeignKeyConstraint(['set_unique_id'], ['sets.unique_id'], name='set_printings_set_unique_id_fkey'),
        PrimaryKeyConstraint('unique_id', name='set_printings_pkey'),
        UniqueConstraint('set_unique_id', 'language', 'edition', name='set_printings_set_unique_id_language_edition_key')
    )

    unique_id = mapped_column(String(21))
    set_unique_id = mapped_column(String(21), nullable=False)
    language = mapped_column(String(10), nullable=False)
    edition = mapped_column(String(255), nullable=False)
    start_card_id = mapped_column(String(15), nullable=False)
    end_card_id = mapped_column(String(15), nullable=False)
    out_of_print = mapped_column(Boolean, nullable=False)
    initial_release_date = mapped_column(DateTime)
    card_database = mapped_column(String(1000))
    product_page = mapped_column(String(1000))
    collectors_center = mapped_column(String(1000))
    card_gallery = mapped_column(String(1000))
    release_notes = mapped_column(String(1000))
    set_logo = mapped_column(String(1000))

    set_unique: Mapped['Sets'] = relationship('Sets', back_populates='set_printings')
    card_printings: Mapped[list['CardPrintings']] = relationship('CardPrintings', uselist=True, back_populates='set_printing_unique')


class TypeTranslations(Base):
    __tablename__ = 'type_translations'
    __table_args__ = (
        ForeignKeyConstraint(['type_unique_id'], ['types.unique_id'], name='type_translations_type_unique_id_fkey'),
        PrimaryKeyConstraint('type_unique_id', 'language', name='type_translations_pkey')
    )

    type_unique_id = mapped_column(String(21), nullable=False)
    language = mapped_column(String(10), nullable=False)
    name = mapped_column(String(255))

    type_unique: Mapped['Types'] = relationship('Types', back_populates='type_translations')


class CardPrintings(Base):
    __tablename__ = 'card_printings'
    __table_args__ = (
        ForeignKeyConstraint(['card_unique_id'], ['cards.unique_id'], name='card_printings_card_unique_id_fkey'),
        ForeignKeyConstraint(['set_printing_unique_id'], ['set_printings.unique_id'], name='card_printings_set_printing_unique_id_fkey'),
        PrimaryKeyConstraint('unique_id', name='card_printings_pkey'),
        UniqueConstraint('unique_id', 'card_id', 'edition', 'art_variations', name='card_printings_unique_id_card_id_edition_art_variations_key')
    )

    unique_id = mapped_column(String(21))
    card_unique_id = mapped_column(String(21), nullable=False)
    set_printing_unique_id = mapped_column(String(21), nullable=False)
    card_id = mapped_column(String(15), nullable=False)
    set_id = mapped_column(String(15), nullable=False)
    edition = mapped_column(String(15), nullable=False)
    foiling = mapped_column(String(15), nullable=False)
    rarity = mapped_column(String(15), nullable=False)
    artists = mapped_column(String(1000), nullable=False)
    art_variations = mapped_column(String(15), nullable=False)
    expansion_slot = mapped_column(Boolean, nullable=False, server_default=text('false'))
    flavor_text = mapped_column(String(10000), nullable=False)
    flavor_text_plain = mapped_column(String(10000), nullable=False)
    image_url = mapped_column(String(1000), nullable=False)
    image_rotation_degrees = mapped_column(SmallInteger, nullable=False)
    tcgplayer_product_id = mapped_column(String(100), nullable=False)
    tcgplayer_url = mapped_column(String(1000), nullable=False)

    card_unique: Mapped['Cards'] = relationship('Cards', back_populates='card_printings')
    set_printing_unique: Mapped['SetPrintings'] = relationship('SetPrintings', back_populates='card_printings')


t_card_face_associations = Table(
    'card_face_associations', metadata,
    Column('front_unique_id', String(21), nullable=False),
    Column('back_unique_id', String(21), nullable=False),
    Column('is_dfc', Boolean, nullable=False),
    ForeignKeyConstraint(['back_unique_id'], ['card_printings.unique_id'], name='card_face_associations_back_unique_id_fkey'),
    ForeignKeyConstraint(['front_unique_id'], ['card_printings.unique_id'], name='card_face_associations_front_unique_id_fkey'),
    UniqueConstraint('front_unique_id', 'back_unique_id', name='card_face_associations_front_unique_id_back_unique_id_key')
)
